org.achartengine.GraphicalActivity -> org.achartengine.GraphicalActivity:
    org.achartengine.GraphicalView mView -> a
    org.achartengine.chart.AbstractChart mChart -> b
    void onCreate(android.os.Bundle) -> onCreate
org.achartengine.GraphicalView -> org.achartengine.a:
    org.achartengine.chart.AbstractChart mChart -> a
    org.achartengine.renderer.DefaultRenderer mRenderer -> b
    android.graphics.Rect mRect -> c
    android.os.Handler mHandler -> d
    android.graphics.RectF mZoomR -> e
    android.graphics.Bitmap zoomInImage -> f
    android.graphics.Bitmap zoomOutImage -> g
    android.graphics.Bitmap fitZoomImage -> h
    int zoomSize -> i
    int ZOOM_BUTTONS_COLOR -> j
    org.achartengine.tools.Zoom mZoomIn -> k
    org.achartengine.tools.Zoom mZoomOut -> l
    org.achartengine.tools.FitZoom mFitZoom -> m
    android.graphics.Paint mPaint -> n
    org.achartengine.ITouchHandler mTouchHandler -> o
    float oldX -> p
    float oldY -> q
    void onDraw(android.graphics.Canvas) -> onDraw
    void zoomIn() -> a
    void zoomOut() -> b
    void zoomReset() -> c
    android.graphics.RectF getZoomRectangle() -> d
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void repaint() -> e
org.achartengine.GraphicalView$1 -> org.achartengine.b:
    org.achartengine.GraphicalView this$0 -> a
    void run() -> run
org.achartengine.ITouchHandler -> org.achartengine.c:
    boolean handleTouch(android.view.MotionEvent) -> a
org.achartengine.TouchHandler -> org.achartengine.d:
    org.achartengine.renderer.DefaultRenderer mRenderer -> a
    float oldX -> b
    float oldY -> c
    float oldX2 -> d
    float oldY2 -> e
    android.graphics.RectF zoomR -> f
    org.achartengine.tools.Pan mPan -> g
    org.achartengine.tools.Zoom mPinchZoom -> h
    org.achartengine.GraphicalView graphicalView -> i
    boolean handleTouch(android.view.MotionEvent) -> a
org.achartengine.TouchHandlerOld -> org.achartengine.e:
    org.achartengine.renderer.DefaultRenderer mRenderer -> a
    float oldX -> b
    float oldY -> c
    android.graphics.RectF zoomR -> d
    org.achartengine.tools.Pan mPan -> e
    org.achartengine.GraphicalView graphicalView -> f
    boolean handleTouch(android.view.MotionEvent) -> a
org.achartengine.chart.AbstractChart -> org.achartengine.a.a:
    void draw(android.graphics.Canvas,int,int,int,int,android.graphics.Paint) -> a
    void drawBackground(org.achartengine.renderer.DefaultRenderer,android.graphics.Canvas,int,int,int,int,android.graphics.Paint,boolean,int) -> a
    int drawLegend(android.graphics.Canvas,org.achartengine.renderer.DefaultRenderer,java.lang.String[],int,int,int,int,int,int,android.graphics.Paint,boolean) -> a
    void drawString(android.graphics.Canvas,java.lang.String,float,float,android.graphics.Paint) -> a
    boolean getExceed(float,org.achartengine.renderer.DefaultRenderer,int,int) -> a
    boolean isVertical(org.achartengine.renderer.DefaultRenderer) -> a
    float[] calculateDrawPoints(float,float,float,float,int,int) -> a
    void drawPath(android.graphics.Canvas,float[],android.graphics.Paint,boolean) -> a
    int getLegendShapeWidth$134621() -> a
    void drawLegendShape(android.graphics.Canvas,org.achartengine.renderer.SimpleSeriesRenderer,float,float,int,android.graphics.Paint) -> a
org.achartengine.chart.ClickableArea -> org.achartengine.a.b:
    android.graphics.RectF rect -> a
    double x -> b
    double y -> c
org.achartengine.chart.LineChart -> org.achartengine.a.c:
    org.achartengine.chart.ScatterChart pointsChart -> c
    void drawSeries$5b0b722c(android.graphics.Canvas,android.graphics.Paint,float[],org.achartengine.renderer.SimpleSeriesRenderer,float) -> a
    org.achartengine.chart.ClickableArea[] clickableAreasForPoints$1222cb8e(float[],double[]) -> a
    int getLegendShapeWidth$134621() -> a
    void drawLegendShape(android.graphics.Canvas,org.achartengine.renderer.SimpleSeriesRenderer,float,float,int,android.graphics.Paint) -> a
    boolean isRenderPoints(org.achartengine.renderer.SimpleSeriesRenderer) -> a
    org.achartengine.chart.ScatterChart getPointsChart() -> b
org.achartengine.chart.PointStyle -> org.achartengine.a.d:
    org.achartengine.chart.PointStyle X -> a
    org.achartengine.chart.PointStyle CIRCLE -> b
    org.achartengine.chart.PointStyle TRIANGLE -> c
    org.achartengine.chart.PointStyle SQUARE -> d
    org.achartengine.chart.PointStyle DIAMOND -> e
    org.achartengine.chart.PointStyle POINT -> f
    java.lang.String mName -> g
    org.achartengine.chart.PointStyle[] $VALUES -> h
    org.achartengine.chart.PointStyle[] values() -> values
    org.achartengine.chart.PointStyle valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
org.achartengine.chart.RoundChart -> org.achartengine.a.e:
    org.achartengine.renderer.DefaultRenderer mRenderer -> a
    int mCenterX -> b
    int mCenterY -> c
    org.achartengine.renderer.DefaultRenderer getRenderer() -> b
    int getCenterX() -> c
    int getCenterY() -> d
    void setCenterX(int) -> a
    void setCenterY(int) -> b
org.achartengine.chart.ScatterChart -> org.achartengine.a.f:
    float size -> c
    void drawSeries$5b0b722c(android.graphics.Canvas,android.graphics.Paint,float[],org.achartengine.renderer.SimpleSeriesRenderer,float) -> a
    org.achartengine.chart.ClickableArea[] clickableAreasForPoints$1222cb8e(float[],double[]) -> a
    int getLegendShapeWidth$134621() -> a
    void drawLegendShape(android.graphics.Canvas,org.achartengine.renderer.SimpleSeriesRenderer,float,float,int,android.graphics.Paint) -> a
    void drawX(android.graphics.Canvas,android.graphics.Paint,float,float) -> a
    void drawCircle(android.graphics.Canvas,android.graphics.Paint,float,float) -> b
    void drawTriangle(android.graphics.Canvas,android.graphics.Paint,float[],float,float) -> a
    void drawSquare(android.graphics.Canvas,android.graphics.Paint,float,float) -> c
    void drawDiamond(android.graphics.Canvas,android.graphics.Paint,float[],float,float) -> b
org.achartengine.chart.ScatterChart$1 -> org.achartengine.a.g:
    int[] $SwitchMap$org$achartengine$chart$PointStyle -> a
org.achartengine.chart.XYChart -> org.achartengine.a.h:
    org.achartengine.model.XYMultipleSeriesDataset mDataset -> a
    org.achartengine.renderer.XYMultipleSeriesRenderer mRenderer -> b
    float mScale -> c
    float mTranslate -> d
    org.achartengine.model.Point mCenter -> e
    android.graphics.Rect mScreenR -> f
    java.util.Map mCalcRange -> g
    java.util.Map clickableAreas -> h
    void draw(android.graphics.Canvas,int,int,int,int,android.graphics.Paint) -> a
    java.util.Map getYLabels(double[],double[],int) -> a
    java.util.List getValidLabels(java.util.List) -> a
    void drawSeries$7a25fd6f(org.achartengine.model.XYSeries,android.graphics.Canvas,android.graphics.Paint,java.util.List,org.achartengine.renderer.SimpleSeriesRenderer,float,org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation,int) -> a
    void setStroke(android.graphics.Paint$Cap,android.graphics.Paint$Join,float,android.graphics.Paint$Style,android.graphics.PathEffect,android.graphics.Paint) -> a
    void drawChartValuesText$76a1002a(android.graphics.Canvas,org.achartengine.model.XYSeries,org.achartengine.renderer.SimpleSeriesRenderer,android.graphics.Paint,float[],int) -> a
    void drawText(android.graphics.Canvas,java.lang.String,float,float,android.graphics.Paint,float) -> a
    void transform(android.graphics.Canvas,float,boolean) -> a
    java.lang.String getLabel(double) -> a
    void drawXLabels(java.util.List,java.lang.Double[],android.graphics.Canvas,android.graphics.Paint,int,int,int,double,double,double) -> a
    void drawYLabels(java.util.Map,android.graphics.Canvas,android.graphics.Paint,int,int,int,int,double[],double[]) -> a
    org.achartengine.renderer.XYMultipleSeriesRenderer getRenderer() -> c
    org.achartengine.model.XYMultipleSeriesDataset getDataset() -> d
    double[] getCalcRange(int) -> a
    int getLabelLinePos(android.graphics.Paint$Align) -> a
    double[] toRealPoint(float,float,int) -> a
    void drawSeries$5b0b722c(android.graphics.Canvas,android.graphics.Paint,float[],org.achartengine.renderer.SimpleSeriesRenderer,float) -> a
    org.achartengine.chart.ClickableArea[] clickableAreasForPoints$1222cb8e(float[],double[]) -> a
    boolean isRenderPoints(org.achartengine.renderer.SimpleSeriesRenderer) -> a
    org.achartengine.chart.ScatterChart getPointsChart() -> b
org.achartengine.model.Point -> org.achartengine.b.a:
    float mX -> a
    float mY -> b
    float getX() -> a
    float getY() -> b
org.achartengine.model.XYMultipleSeriesDataset -> org.achartengine.b.b:
    java.util.List mSeries -> a
    void addSeries(org.achartengine.model.XYSeries) -> a
    org.achartengine.model.XYSeries getSeriesAt(int) -> a
    int getSeriesCount() -> a
    org.achartengine.model.XYSeries[] getSeries() -> b
org.achartengine.model.XYSeries -> org.achartengine.b.c:
    java.lang.String mTitle -> a
    org.achartengine.util.IndexXYMap mXY -> b
    double mMinX -> c
    double mMaxX -> d
    double mMinY -> e
    double mMaxY -> f
    int mScaleNumber -> g
    int getScaleNumber() -> a
    void initRange() -> h
    void updateRange(double,double) -> c
    java.lang.String getTitle() -> b
    void add(double,double) -> a
    double getX(int) -> b
    double getY(int) -> a
    java.util.SortedMap getRange$70a7aec0(double,double) -> b
    int getIndexForKey(double) -> a
    int getItemCount() -> c
    double getMinX() -> d
    double getMinY() -> e
    double getMaxX() -> f
    double getMaxY() -> g
org.achartengine.renderer.BasicStroke -> org.achartengine.c.a:
    org.achartengine.renderer.BasicStroke SOLID -> a
    org.achartengine.renderer.BasicStroke DASHED -> b
    org.achartengine.renderer.BasicStroke DOTTED -> c
    android.graphics.Paint$Cap mCap -> d
    android.graphics.Paint$Join mJoin -> e
    float mMiter -> f
    float[] mIntervals -> g
    float mPhase -> h
    android.graphics.Paint$Cap getCap() -> a
    android.graphics.Paint$Join getJoin() -> b
    float getMiter() -> c
    float[] getIntervals() -> d
    float getPhase() -> e
org.achartengine.renderer.DefaultRenderer -> org.achartengine.c.b:
    java.lang.String mChartTitle -> a
    float mChartTitleTextSize -> b
    android.graphics.Typeface REGULAR_TEXT_FONT -> c
    java.lang.String mTextTypefaceName -> d
    int mTextTypefaceStyle -> e
    int mBackgroundColor -> f
    boolean mApplyBackgroundColor -> g
    boolean mShowAxes -> h
    int mAxesColor -> i
    boolean mShowLabels -> j
    int mLabelsColor -> k
    float mLabelsTextSize -> l
    boolean mShowLegend -> m
    float mLegendTextSize -> n
    boolean mFitLegend -> o
    boolean mShowGridX -> p
    boolean mShowGridY -> q
    boolean mShowCustomTextGrid -> r
    java.util.List mRenderers -> s
    boolean mAntialiasing -> t
    int mLegendHeight -> u
    int[] mMargins -> v
    float mScale -> w
    boolean mPanEnabled -> x
    boolean mZoomEnabled -> y
    boolean mZoomButtonsVisible -> z
    float mZoomRate -> A
    boolean mExternalZoomEnabled -> B
    float mOriginalScale -> C
    boolean mClickEnabled -> D
    int selectableBuffer -> E
    boolean mInScroll -> F
    float mStartAngle -> G
    java.lang.String getChartTitle() -> a
    void setChartTitle(java.lang.String) -> a
    float getChartTitleTextSize() -> b
    void setChartTitleTextSize$133aeb() -> c
    void addSeriesRenderer(org.achartengine.renderer.SimpleSeriesRenderer) -> a
    org.achartengine.renderer.SimpleSeriesRenderer getSeriesRendererAt(int) -> a
    int getSeriesRendererCount() -> d
    int getBackgroundColor() -> e
    boolean isApplyBackgroundColor() -> f
    int getAxesColor() -> g
    void setAxesColor$13462e() -> h
    int getLabelsColor() -> i
    void setLabelsColor$13462e() -> j
    float getLabelsTextSize() -> k
    void setLabelsTextSize$133aeb() -> l
    boolean isShowAxes() -> m
    boolean isShowLabels() -> n
    boolean isShowGridX() -> o
    boolean isShowGridY() -> p
    void setShowGrid$1385ff() -> q
    boolean isShowCustomTextGrid() -> r
    boolean isShowLegend() -> s
    boolean isFitLegend() -> t
    java.lang.String getTextTypefaceName() -> u
    int getTextTypefaceStyle() -> v
    float getLegendTextSize() -> w
    void setLegendTextSize$133aeb() -> x
    boolean isAntialiasing() -> y
    float getScale() -> z
    float getOriginalScale() -> A
    void setScale(float) -> a
    boolean isZoomEnabled() -> B
    boolean isZoomButtonsVisible() -> C
    void setZoomButtonsVisible$1385ff() -> D
    boolean isExternalZoomEnabled() -> E
    float getZoomRate() -> F
    boolean isPanEnabled() -> G
    boolean isClickEnabled() -> H
    int getSelectableBuffer() -> I
    int getLegendHeight() -> J
    int[] getMargins() -> K
    void setMargins(int[]) -> a
    boolean isInScroll() -> L
org.achartengine.renderer.SimpleSeriesRenderer -> org.achartengine.c.c:
    int mColor -> a
    boolean mDisplayChartValues -> b
    float mChartValuesTextSize -> c
    android.graphics.Paint$Align mChartValuesTextAlign -> d
    float mChartValuesSpacing -> e
    org.achartengine.renderer.BasicStroke mStroke -> f
    boolean mGradientEnabled -> g
    int getColor() -> a
    void setColor(int) -> a
    boolean isDisplayChartValues() -> b
    float getChartValuesTextSize() -> c
    android.graphics.Paint$Align getChartValuesTextAlign() -> d
    float getChartValuesSpacing() -> e
    org.achartengine.renderer.BasicStroke getStroke() -> f
org.achartengine.renderer.XYMultipleSeriesRenderer -> org.achartengine.c.d:
    java.lang.String mXTitle -> a
    java.lang.String[] mYTitle -> b
    float mAxisTitleTextSize -> c
    double[] mMinX -> d
    double[] mMaxX -> e
    double[] mMinY -> f
    double[] mMaxY -> g
    int mXLabels -> h
    int mYLabels -> i
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation mOrientation -> j
    java.util.Map mXTextLabels -> k
    java.util.Map mYTextLabels -> l
    boolean mPanXEnabled -> m
    boolean mPanYEnabled -> n
    boolean mZoomXEnabled -> o
    boolean mZoomYEnabled -> p
    double mBarSpacing -> q
    int mMarginsColor -> r
    double[] mPanLimits -> s
    double[] mZoomLimits -> t
    float mXLabelsAngle -> u
    float mYLabelsAngle -> v
    java.util.Map initialRange -> w
    float mPointSize -> x
    int mGridColor -> y
    int scalesCount -> z
    android.graphics.Paint$Align xLabelsAlign -> A
    android.graphics.Paint$Align[] yLabelsAlign -> B
    android.graphics.Paint$Align[] yAxisAlign -> C
    int mXLabelsColor -> D
    int[] mYLabelsColor -> E
    void initAxesRange$13462e() -> ao
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation getOrientation() -> M
    java.lang.String getXTitle() -> N
    void setXTitle(java.lang.String) -> b
    java.lang.String getYTitle() -> O
    java.lang.String getYTitle(int) -> b
    void setYTitle(java.lang.String) -> c
    float getAxisTitleTextSize() -> P
    void setAxisTitleTextSize$133aeb() -> Q
    void setXAxisMin$133369() -> R
    void setXAxisMax$133369() -> S
    void setYAxisMin(double) -> a
    void setYAxisMax(double) -> b
    double getXAxisMin(int) -> c
    void setXAxisMin(double,int) -> a
    boolean isMinXSet(int) -> d
    double getXAxisMax(int) -> e
    void setXAxisMax(double,int) -> b
    boolean isMaxXSet(int) -> f
    double getYAxisMin(int) -> g
    void setYAxisMin(double,int) -> c
    boolean isMinYSet(int) -> h
    double getYAxisMax(int) -> i
    void setYAxisMax(double,int) -> d
    boolean isMaxYSet(int) -> j
    int getXLabels() -> T
    void setXLabels$13462e() -> U
    java.lang.String getXTextLabel(java.lang.Double) -> a
    java.lang.Double[] getXTextLabelLocations() -> V
    java.lang.String getYTextLabel(java.lang.Double,int) -> a
    java.lang.Double[] getYTextLabelLocations(int) -> k
    int getYLabels() -> W
    void setYLabels$13462e() -> X
    boolean isPanEnabled() -> G
    boolean isPanXEnabled() -> Y
    boolean isPanYEnabled() -> Z
    boolean isZoomEnabled() -> B
    boolean isZoomXEnabled() -> aa
    boolean isZoomYEnabled() -> ab
    int getMarginsColor() -> ac
    void setMarginsColor(int) -> l
    int getGridColor() -> ad
    double[] getPanLimits() -> ae
    void setPanLimits(double[]) -> a
    double[] getZoomLimits() -> af
    void setZoomLimits(double[]) -> b
    float getXLabelsAngle() -> ag
    float getYLabelsAngle() -> ah
    float getPointSize() -> ai
    void setPointSize$133aeb() -> aj
    void setRange(double[],int) -> a
    boolean isInitialRangeSet() -> ak
    boolean isInitialRangeSet(int) -> m
    double[] getInitialRange(int) -> n
    int getXLabelsColor() -> al
    int getYLabelsColor(int) -> o
    android.graphics.Paint$Align getXLabelsAlign() -> am
    void setXLabelsAlign(android.graphics.Paint$Align) -> a
    android.graphics.Paint$Align getYLabelsAlign(int) -> p
    void setYLabelsAlign(android.graphics.Paint$Align) -> b
    android.graphics.Paint$Align getYAxisAlign(int) -> q
    int getScalesCount() -> an
org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation -> org.achartengine.c.e:
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation HORIZONTAL -> a
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation VERTICAL -> b
    int mAngle -> c
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation[] $VALUES -> d
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation[] values() -> values
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation valueOf(java.lang.String) -> valueOf
    int getAngle() -> a
org.achartengine.renderer.XYSeriesRenderer -> org.achartengine.c.f:
    boolean mFillPoints -> a
    boolean mFillBelowLine -> b
    int mFillColor -> c
    org.achartengine.chart.PointStyle mPointStyle -> d
    float mLineWidth -> e
    boolean isFillBelowLine() -> g
    boolean isFillPoints() -> h
    void setFillPoints$1385ff() -> i
    int getFillBelowLineColor() -> j
    org.achartengine.chart.PointStyle getPointStyle() -> k
    void setPointStyle(org.achartengine.chart.PointStyle) -> a
    float getLineWidth() -> l
org.achartengine.tools.AbstractTool -> org.achartengine.d.a:
    org.achartengine.chart.AbstractChart mChart -> a
    org.achartengine.renderer.XYMultipleSeriesRenderer mRenderer -> b
    double[] getRange(int) -> a
    void checkRange(double[],int) -> a
    void setXRange(double,double,int) -> a
    void setYRange(double,double,int) -> b
org.achartengine.tools.FitZoom -> org.achartengine.d.b:
    void apply() -> a
org.achartengine.tools.Pan -> org.achartengine.d.c:
    java.util.List mPanListeners -> c
    boolean limitsReachedX -> d
    boolean limitsReachedY -> e
    void apply(float,float,float,float) -> a
    void notifyPanListeners() -> a
org.achartengine.tools.Zoom -> org.achartengine.d.d:
    boolean mZoomIn -> c
    float mZoomRate -> d
    java.util.List mZoomListeners -> e
    boolean limitsReachedX -> f
    boolean limitsReachedY -> g
    void setZoomRate(float) -> a
    void apply(int) -> b
    void notifyZoomListeners$8a7ab56() -> b
    void notifyZoomResetListeners() -> a
org.achartengine.tools.ZoomEvent -> org.achartengine.d.e:
    boolean mZoomIn -> a
    float mZoomRate -> b
org.achartengine.util.IndexXYMap -> org.achartengine.e.a:
    java.util.List indexList -> a
    double maxXDifference -> b
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void updateMaxXDifference() -> a
    void clear() -> clear
    java.lang.Object getXByIndex(int) -> a
    java.lang.Object getYByIndex(int) -> b
    int getIndexForKey(java.lang.Object) -> a
org.achartengine.util.MathHelper -> org.achartengine.e.b:
    java.text.NumberFormat FORMAT -> a
    java.util.List getLabels(double,double,int) -> a
    float[] getFloats(java.util.List) -> a
    double[] getDoubles(java.util.List) -> b
sisi.orange.data.AppInfoItem -> sisi.orange.data.a:
    android.graphics.drawable.Drawable icon -> a
    java.lang.String name -> b
    java.lang.String packagename -> c
    int uid -> d
    long rxBytes -> e
    long txBytes -> f
    long oldrxBytes -> g
    boolean isCustomApp -> h
    java.util.ArrayList subItems -> i
    android.graphics.drawable.Drawable getIcon() -> a
    void setIcon(android.graphics.drawable.Drawable) -> a
    java.lang.String getName() -> b
    void setName(java.lang.String) -> a
    java.lang.String getPackageName() -> c
    void setPackageName(java.lang.String) -> b
    int getUid() -> d
    void setUid(int) -> a
    long getRxBytes() -> e
    void setRxBytes(long) -> a
    long getTxBytes() -> f
    long getSpeed() -> i
    void setTxBytes(long) -> b
    void addSubItems(sisi.orange.data.AppInfoItem) -> a
    java.lang.String getTxBytesFormat() -> g
    java.lang.String getRxBytesFormat() -> h
    java.lang.String formatBytes(long) -> c
    void setCustomApp(boolean) -> a
    int compareTo(java.lang.Object) -> compareTo
sisi.orange.data.AppListAdapter -> sisi.orange.data.b:
    java.util.List list -> a
    android.view.LayoutInflater mInflater -> b
    android.content.Context context -> c
    java.util.Map viewMap -> d
    void setList(java.util.List) -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
sisi.orange.data.AppListAdapter$ViewHolder -> sisi.orange.data.c:
    android.widget.TextView txtAppName -> a
    android.widget.ImageView imgAppIcon -> b
    android.widget.TextView txtRxBytes -> c
    android.widget.TextView txtTxBytes -> d
sisi.orange.data.DBStr -> sisi.orange.data.d:
    android.net.Uri CONTENT_URI -> a
    android.net.Uri LIST_URI -> b
sisi.orange.data.DBlite -> sisi.orange.data.e:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
sisi.orange.data.Data -> sisi.orange.data.f:
    android.content.ContentValues values -> a
    double[][] getListDateTrafficInfo(android.content.Context) -> a
    void updateTempTraffic(android.content.Context,long,java.lang.String) -> a
    int getNotifyUnit(android.content.Context) -> b
    boolean isPreNetAvaiable(android.content.Context,java.lang.String) -> a
    void setNetAvaiable(android.content.Context,boolean,java.lang.String) -> a
    int getFlagData(android.content.Context,int,java.lang.String) -> a
    void update(android.content.Context,int,int,java.lang.String) -> a
    void clearDataOverMonth(android.content.Context) -> c
    void zeroapk(android.content.Context) -> d
    sisi.orange.data.ServiceData getServiceData(android.content.Context,java.lang.String) -> b
    void setServiceDataByService(android.content.Context,sisi.orange.data.ServiceData,java.lang.String) -> a
    void getSettingData(android.content.Context,sisi.orange.data.ServiceData,java.lang.String) -> b
    void setServiceDataByActivity(android.content.Context,sisi.orange.data.ServiceData) -> a
    java.util.List getListAppInfo(android.content.Context) -> e
    void updateListAppInfo(android.content.Context,java.util.List) -> a
sisi.orange.data.MyProvider -> sisi.orange.data.MyProvider:
    sisi.orange.data.DBlite dBlite -> a
    android.database.sqlite.SQLiteDatabase db -> b
    android.content.UriMatcher sMatcher -> c
    int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    java.lang.String getType(android.net.Uri) -> getType
    android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    boolean onCreate() -> onCreate
    android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
sisi.orange.data.NetTraffic -> sisi.orange.data.NetTraffic:
    long getMobileTxBytes() -> getMobileTxBytes
    long getMobileRxBytes() -> getMobileRxBytes
    long getTotalTxBytes() -> getTotalTxBytes
    long getTotalRxBytes() -> getTotalRxBytes
    long getUidTxBytes(int) -> getUidTxBytes
    long getUidRxBytes(int) -> getUidRxBytes
    long getTotalBytes(java.lang.String) -> a
sisi.orange.data.ServiceData -> sisi.orange.data.g:
    int sum -> a
    int history -> b
    int tempTraffic -> c
    int DateDay -> d
    int notifyData -> e
    int NOTIFI_SHOW_FLAG -> f
    int notifyUnite -> g
    int line -> h
    boolean netAvaiable -> i
    int delay -> j
    int getNOTIFI_SHOW_FLAG() -> a
    void setNOTIFI_SHOW_FLAG(int) -> a
    boolean isNetAvaiable() -> b
    void setNetAvaiable(boolean) -> a
    int getHistory() -> c
    void setHistory(int) -> b
    int getTempTraffic() -> d
    void setTempTraffic(int) -> c
    int getDateDay() -> e
    void setDateDay(int) -> d
    int getLine() -> f
    void setLine(int) -> e
    int getDelay() -> g
    int getSum() -> h
    void setSum(int) -> f
    int getNotifyData() -> i
    void setNotifyData(int) -> g
    long getMonthUseData() -> j
    long getTodayUseData() -> k
    int getNotifyUnite() -> l
    void setNotifyUnite(int) -> h
sisi.orange.joy.Detector -> sisi.orange.a.a:
    sisi.orange.joy.Detector$Handle hand -> a
    float[] minmax -> b
    float mX -> c
    float mY -> d
    int result -> e
    int wid -> f
    int hei -> g
    android.view.GestureDetector gd -> h
    boolean onTouchEvent(android.view.MotionEvent) -> a
    void setListener(sisi.orange.joy.Detector$Handle) -> a
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    void recycle() -> a
sisi.orange.joy.Detector$Handle -> sisi.orange.a.b:
    void hand$255f295(int) -> a
sisi.orange.list.PhoneInfo -> sisi.orange.list.a:
    java.lang.String mIMEI -> a
    java.lang.String mPhoneType -> b
    java.lang.String mSysVersion -> c
    java.lang.String mNetWorkCountryIso -> d
    java.lang.String mNetWorkOperatorName -> e
    java.lang.String mNetWorkType -> f
    java.lang.String mConnectTypeName -> g
    java.lang.String mMemInfo -> h
    java.lang.String mCupInfo -> i
    java.lang.String mModelName -> j
    java.lang.String mDisplay -> k
    long getTotalMem$faab219() -> a
    java.lang.String getCpuInfo() -> b
    sisi.orange.list.PhoneInfo getPhoneInfo(android.content.Context) -> a
    java.lang.String toString() -> toString
sisi.orange.list.TaskManager -> sisi.orange.list.b:
    android.content.Context context -> b
    sisi.orange.list.TaskManager instance -> a
    sisi.orange.list.TaskManager getInstance(android.content.Context) -> a
    java.util.List getAppInfoList() -> a
    sisi.orange.data.AppInfoItem getAppInfoItembyUid(int,java.util.List) -> a
sisi.orange.list.UidListActivity -> sisi.orange.list.UidListActivity:
    java.util.List listAppInfo -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
sisi.orange.list.UidListActivity$1 -> sisi.orange.list.c:
    sisi.orange.list.UidListActivity this$0 -> a
    void dealSnap(int) -> a
sisi.orange.menu.MenuMore -> sisi.orange.menu.MenuMore:
    android.app.AlertDialog$Builder b -> b
    android.os.Handler mHandler -> a
    void onCreate(android.os.Bundle) -> onCreate
    android.app.AlertDialog$Builder access$0(sisi.orange.menu.MenuMore) -> a
sisi.orange.menu.MenuMore$1 -> sisi.orange.menu.a:
    sisi.orange.menu.MenuMore this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    sisi.orange.menu.MenuMore access$0(sisi.orange.menu.MenuMore$1) -> a
sisi.orange.menu.MenuMore$1$1 -> sisi.orange.menu.b:
    sisi.orange.menu.MenuMore$1 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
sisi.orange.menu.MenuMore$1$2 -> sisi.orange.menu.c:
    sisi.orange.menu.MenuMore$1 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
sisi.orange.menu.SettingActivity -> sisi.orange.menu.SettingActivity:
    android.widget.TextView tview -> a
    sisi.orange.data.ServiceData dataMobile -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
    void onDestroy() -> onDestroy
    java.lang.String formateFileSize(long) -> a
    void access$0(sisi.orange.menu.SettingActivity) -> a
    sisi.orange.data.ServiceData access$1(sisi.orange.menu.SettingActivity) -> b
sisi.orange.menu.SettingActivity$1 -> sisi.orange.menu.d:
    sisi.orange.menu.SettingActivity this$0 -> a
    void onClick(android.view.View) -> onClick
sisi.orange.menu.SettingActivity$2 -> sisi.orange.menu.e:
    sisi.orange.menu.SettingActivity this$0 -> a
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
sisi.orange.view.AbstractDemoChart -> sisi.orange.view.a:
    org.achartengine.model.XYMultipleSeriesDataset buildDataset(java.lang.String[],java.util.List,java.util.List) -> a
    org.achartengine.renderer.XYMultipleSeriesRenderer buildRenderer(int[],org.achartengine.chart.PointStyle[]) -> a
sisi.orange.view.NetTrafficApplication -> sisi.orange.view.NetTrafficApplication:
    void onCreate() -> onCreate
sisi.orange.view.ScrollLayout -> sisi.orange.view.ScrollLayout:
    android.widget.Scroller mScroller -> a
    android.view.VelocityTracker mVelocityTracker -> b
    int mCurScreen -> c
    int mDefaultScreen -> d
    int mTouchState -> e
    int mTouchSlop -> f
    float mLastMotionX -> g
    sisi.orange.view.ScrollLayout$SnapListener mSnapListener -> h
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    void snapToScreen(int) -> b
    void setToScreen(int) -> a
    void computeScroll() -> computeScroll
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void setSnapListener(sisi.orange.view.ScrollLayout$SnapListener) -> a
sisi.orange.view.ScrollLayout$SnapListener -> sisi.orange.view.b:
    void dealSnap(int) -> a
sisi.orange.view.calculate.AboutActivity -> sisi.orange.view.calculate.AboutActivity:
    void onCreate(android.os.Bundle) -> onCreate
sisi.orange.view.calculate.AbstractService -> sisi.orange.view.calculate.AbstractService:
    sisi.orange.data.ServiceData serviceData -> a
    android.content.Context context -> b
    sisi.orange.view.calculate.Broad mBroad -> c
    sisi.orange.view.calculate.NetReceiver receiver -> e
    java.lang.String category -> d
    android.os.Handler handler -> f
    java.lang.Runnable inqueryRunnable -> g
    void onCreate() -> onCreate
    android.os.IBinder onBind(android.content.Intent) -> onBind
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void onDestroy() -> onDestroy
    void dealNotifycation() -> a
    void print(java.lang.String) -> a
    android.os.Handler access$0(sisi.orange.view.calculate.AbstractService) -> a
    java.lang.Runnable access$1(sisi.orange.view.calculate.AbstractService) -> b
    void access$2(sisi.orange.view.calculate.AbstractService,java.lang.String) -> a
sisi.orange.view.calculate.AbstractService$1 -> sisi.orange.view.calculate.a:
    sisi.orange.view.calculate.AbstractService this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
sisi.orange.view.calculate.AbstractService$2 -> sisi.orange.view.calculate.b:
    sisi.orange.view.calculate.AbstractService this$0 -> a
    void run() -> run
sisi.orange.view.calculate.AbstractService$3 -> sisi.orange.view.calculate.c:
    sisi.orange.view.calculate.AbstractService this$0 -> a
    void ClosingProcess() -> a
    void openingProcess() -> b
    void setDataProcess() -> c
sisi.orange.view.calculate.BootReceiver -> sisi.orange.view.calculate.BootReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    boolean checkNet(android.content.Context,java.lang.String) -> a
sisi.orange.view.calculate.Broad -> sisi.orange.view.calculate.d:
    int notifiUnit -> a
    android.content.Context context -> b
    android.app.Notification notifi -> c
    android.app.NotificationManager nManger -> d
    android.app.PendingIntent pIntent -> e
    int notifFlag -> f
    void AddNotification() -> a
    long notifycation(boolean,int,long,long,long) -> a
    java.lang.CharSequence newNotifiText(long,long) -> a
    java.lang.String formateFileSize(long) -> a
    void cancel() -> b
sisi.orange.view.calculate.MainActivity -> sisi.orange.view.calculate.MainActivity:
    android.widget.TabHost mHost -> a
    android.widget.RadioGroup radioderGroup -> b
    sisi.orange.joy.Detector gd -> c
    void onCreate(android.os.Bundle) -> onCreate
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    void onDestroy() -> onDestroy
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
    android.widget.TabHost access$0(sisi.orange.view.calculate.MainActivity) -> a
sisi.orange.view.calculate.MainActivity$1 -> sisi.orange.view.calculate.e:
    sisi.orange.view.calculate.MainActivity this$0 -> a
    void hand$255f295(int) -> a
sisi.orange.view.calculate.MobileService -> sisi.orange.view.calculate.MobileService:
    void onCreate() -> onCreate
sisi.orange.view.calculate.NetReceiver -> sisi.orange.view.calculate.NetReceiver:
    sisi.orange.view.calculate.NetStateChangeImpl impl -> a
    java.lang.String category -> b
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
sisi.orange.view.calculate.NetStateChangeImpl -> sisi.orange.view.calculate.f:
    void ClosingProcess() -> a
    void openingProcess() -> b
    void setDataProcess() -> c
sisi.orange.view.calculate.TrafficActivity -> sisi.orange.view.calculate.TrafficActivity:
    boolean $assertionsDisabled -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    double[] getMinMax(double[],double[]) -> a
    void onResume() -> onResume
sisi.orange.view.calculate.WifiService -> sisi.orange.view.calculate.WifiService:
    void onCreate() -> onCreate
